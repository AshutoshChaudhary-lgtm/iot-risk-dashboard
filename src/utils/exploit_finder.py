"""
Fetch exploits information from Shodan's Exploits API
"""
import requests
import os
from urllib.parse import quote

def fetch_exploits_for_cve(cve_id, api_key=None):
    """
    Fetch exploits related to a specific CVE ID
    """
    api_key = api_key or os.getenv("SHODAN_API_KEY")
    if not api_key:
        print("No API key available for exploits search")
        return []
        
    try:
        # URL encode the CVE ID
        encoded_cve = quote(cve_id)
        # Query the Exploits API
        url = f"http://exploits.shodan.io/api/search?query=cve:{encoded_cve}&key={api_key}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return data.get("matches", [])
        else:
            print(f"Exploit API returned status code {response.status_code}")
            return []
    except Exception as e:
        print(f"Error fetching exploits for {cve_id}: {e}")
        return []
        
def enrich_vulnerability_data(vulnerabilities, api_key=None):
    """
    Enrich vulnerability data with exploit information
    """
    if not vulnerabilities:
        return vulnerabilities
        
    for vuln in vulnerabilities:
        cve_id = vuln.get("id")
        if cve_id:
            # Fetch exploits
            exploits = fetch_exploits_for_cve(cve_id, api_key)
            vuln["exploits_count"] = len(exploits)
            vuln["exploits"] = exploits[:3]  # Limit to first 3 exploits
            
            # Adjust severity if exploits exist
            if exploits and vuln.get("severity") != "critical":
                # If exploits exist but severity isn't already critical, increase it
                if vuln.get("severity") == "high":
                    vuln["severity"] = "critical"
                elif vuln.get("severity") == "medium":
                    vuln["severity"] = "high"
                elif vuln.get("severity") == "low":
                    vuln["severity"] = "medium"
                    
    return vulnerabilities
